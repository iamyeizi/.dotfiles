#!/bin/bash

if [[ -z $STOW_FOLDERS ]]; then
    if [[ "$OSTYPE" == "darwin"* ]]; then
        export STOW_FOLDERS="home,macos"
    elif [[ "$OSTYPE" == "linux-gnu"* ]]; then
        export STOW_FOLDERS="home"
    fi
fi

if [[ -z $DOTFILES ]]; then
    export DOTFILES=$HOME/.dotfiles
fi

if [[ -z $XDG_CONFIG_HOME ]]; then
    export XDG_CONFIG_HOME=$HOME/.config
fi

function submodules(){
    echo ""
    echo " â€¢ Downloading submodules..."
    echo ""
    pushd $DOTFILES > /dev/null
    git submodule update --init --recursive
    popd > /dev/null
}

function linking(){
    echo " â€¢ Symbolic linking..."
    echo ""
    pushd $DOTFILES > /dev/null
    for folder in $(echo "$STOW_FOLDERS" | sed "s/,/ /g")
    do
        stow -D "$folder"
        stow "$folder"
    done
    popd > /dev/null
}

function fresh(){
    if [[ "$OSTYPE" == "darwin"* ]]; then
        echo ""
        echo " â€¢ Installing requirements..."
        echo ""
        echo " â€¢ Installing XCode command line tools..."
        xcode-select --install
        echo ""
        echo " â€¢ Installing Homebrew..."
        echo ""
        /bin/bash -c "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)"
        brew install git stow

        echo ""
        echo " â€¢ Installing packages and apps..."
        echo ""
        brew bundle --file "$DOTFILES/macos/Brewfile"

        echo ""
        echo " â€¢ Reducing animations..."
        echo ""
        defaults write -g NSScrollViewRubberbanding -int 0
        defaults write -g NSAutomaticWindowAnimationsEnabled -bool false
        defaults write -g NSScrollAnimationEnabled -bool false
        defaults write -g NSWindowResizeTime -float 0.0
        defaults write -g QLPanelAnimationDuration -float 0
        defaults write -g NSScrollViewRubberbanding -bool false
        defaults write -g NSDocumentRevisionsWindowTransformAnimation -bool false
        defaults write -g NSToolbarFullScreenAnimationDuration -float 0
        defaults write -g NSBrowserColumnAnimationSpeedMultiplier -float 0
        defaults write com.apple.dock autohide-time-modifier -float 0
        defaults write com.apple.dock autohide-delay -float 0
        defaults write com.apple.dock expose-animation-duration -float 0
        defaults write com.apple.dock springboard-show-duration -float 0
        defaults write com.apple.dock springboard-hide-duration -float 0
        defaults write com.apple.dock springboard-page-duration -float 0
        defaults write com.apple.finder DisableAllAnimations -bool true
        defaults write com.apple.Mail DisableSendAnimations -bool true
        defaults write com.apple.Mail DisableReplyAnimations -bool true
        defaults write NSGlobalDomain NSWindowResizeTime .001
        defaults write com.apple.dock expose-animation-duration -float 0.0; killall Dock
        # Swap winodws with Ctrl+Command
        defaults write -g NSWindowShouldDragOnGesture -bool true
    elif [[ "$OSTYPE" == "linux-gnu"* ]]; then
        echo " â€¢ Installing packages and apps..."
        echo ""
        sudo apt install -y stow htop curl ripgrep nmap docker sqlite fzf unzip dconf-editor wget tree tmux jq
        # brew "neovim"
    else
        echo " ERROR: Unsupported operating system! ðŸš¨"
        echo " OS: $OSTYPE"
        echo ""
        return
    fi

    echo " â€¢ Creating /Developer and /opt directory..."
    echo ""
    mkdir -p "$HOME/Developer" "$HOME/opt"

    submodules
    linking

    echo " â€¢ Installing oh-my-zsh..."
    echo ""
    curl -fsSL https://raw.githubusercontent.com/ohmyzsh/ohmyzsh/master/tools/install.sh | sh -

}

function main(){
    echo ""
    read -p " â€¢ Fresh installation? (Y/n): " res
    if [[ $res == "Y" || $res == "y" ]]; then
        fresh
        echo ""
        echo " â€¢ Installation complete âœ…"
        echo ""
        echo "  Rebooting in 5s..."
        sleep 5
        sudo reboot
    elif [[ $res == "N" || $res == "n" ]]; then
        submodules
        linking
        echo " â€¢ Installation complete âœ…"
        echo ""
    else
        echo ""
        echo " ERROR: Invalid option! ðŸš¨"
        echo ""
        return
    fi
}

main
