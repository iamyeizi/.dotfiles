#!/bin/bash

if [[ "$OSTYPE" == "linux-gnu"* ]]; then
    echo " • Installing requirements..."
    echo ""
    sudo apt install -y stow git

    echo ""
    echo " • Installing WM..."
    echo "     [1] Sway"
    echo "     [2] i3"
    echo "     [0] Skip..."
    echo ""
    read -p " Which WM?  " res
    if [[ $res == "1" ]];then
        echo ""
        sudo apt install -y sway
    elif [[ $res == "2" ]];then
        echo ""
        sudo apt install -y i3
    else
        echo ""
        echo "  Skipping WM Installer..."
    fi
    echo ""
fi

if [[ "$OSTYPE" == "darwin"* ]]; then
    echo " • Installing requirements..."
    echo ""
    echo " • Installing Homebrew..."
    /bin/bash -c "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)"
    brew install git stow
fi

echo " • Creating directories /d and /work directories..."
mkdir -p $HOME/d $HOME/work

echo " • Downloading submodules..."
git submodule update --init --recursive

echo " • Symbolic linking..."
pushd $DOTFILES
for folder in $(echo $STOW_FOLDERS | sed "s/,/ /g")
do
    echo "stow $folder"
    stow -D $folder
    stow $folder
done
popd

if [[ "$OSTYPE" == "darwin"* ]]; then
    echo " • Installing Xcode command line tools..."
    xcode-select --install
fi

if [[ "$OSTYPE" == "linux-gnu"* ]]; then
    echo " • Installing useful apps..."
    sudo apt install -y zsh ripgrep unzip htop dconf-editor fzf curl wget stow flatpak git tldr tree tmux jq
    curl -fsSL https://get.pnpm.io/install.sh | sh -
    curl -fsSL https://fnm.vercel.app/install | bash
fi

echo " • Installing Oh My Zsh..."
sh -c "$(curl -fsSL https://raw.githubusercontent.com/ohmyzsh/ohmyzsh/master/tools/install.sh)"

if [[ "$OSTYPE" == "linux-gnu"* ]]; then
    echo " • Installing SDKMAN!..."
    curl -s "https://get.sdkman.io" | bash

    echo " • Installing flatpak apps..."
    flatpak remote-add --if-not-exists flathub https://dl.flathub.org/repo/flathub.flatpakrepo
    flatpak install flathub md.obsidian.Obsidian
fi

if [[ "$OSTYPE" == "darwin"* ]]; then
    echo " • Installing packages using Brewfile..."
    brew bundle --file $DOTFILES/Brewfile

    echo " • Reducing animations..."
    defaults write -g NSScrollViewRubberbanding -int 0
    defaults write -g NSAutomaticWindowAnimationsEnabled -bool false
    defaults write -g NSScrollAnimationEnabled -bool false
    defaults write -g NSWindowResizeTime -float 0.001
    defaults write -g QLPanelAnimationDuration -float 0
    defaults write -g NSScrollViewRubberbanding -bool false
    defaults write -g NSDocumentRevisionsWindowTransformAnimation -bool false
    defaults write -g NSToolbarFullScreenAnimationDuration -float 0
    defaults write -g NSBrowserColumnAnimationSpeedMultiplier -float 0
    defaults write com.apple.dock autohide-time-modifier -float 0
    defaults write com.apple.dock autohide-delay -float 0
    defaults write com.apple.dock expose-animation-duration -float 0
    defaults write com.apple.dock springboard-show-duration -float 0
    defaults write com.apple.dock springboard-hide-duration -float 0
    defaults write com.apple.dock springboard-page-duration -float 0
    defaults write com.apple.finder DisableAllAnimations -bool true
    defaults write com.apple.Mail DisableSendAnimations -bool true
    defaults write com.apple.Mail DisableReplyAnimations -bool true
    defaults write NSGlobalDomain NSWindowResizeTime .001
    defaults write com.apple.dock expose-animation-duration -int 0; killall Dock
    defaults write com.apple.dock expose-animation-duration -float 0.1; killall Dock
fi

# echo " • Initializing conda..."
# conda init "$(basename "${SHELL}")"


echo "  Installation complete."
echo ""
echo "  Rebooting..." 
sleep 3
sudo reboot
